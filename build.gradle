plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
    id 'org.jlleitschuh.gradle.ktlint' version '12.1.1'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/Ing-Sistemas/Print-Script")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
        }

    }
}

group = 'ingsis'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

jacoco {
    toolVersion = '0.8.10'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'com.google.code.gson:gson:2.8.9'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.printscript:formatter:1.1.12'
    implementation 'com.printscript:token:1.1.12'
    implementation 'com.printscript:ast:1.1.12'
    implementation 'com.printscript:lexer:1.1.12'
    implementation 'com.printscript:interpreter:1.1.12'
    implementation 'com.printscript:cli:1.1.12'
    implementation 'com.printscript:linter:1.1.12'
    implementation 'com.printscript:parser:1.1.12'
    implementation 'com.printscript:runner:1.1.12'
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

tasks.named('test') {
	useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.required.set(true)
    }
    classDirectories.setFrom(
            fileTree(
                    dir: 'build/classes/kotlin/main',
                    exclude: [
                            "com/example/springboot/app/auth/**",
                            "com/example/springboot/app/configuration/**",
                            "com/example/springboot/app/controller/**",
                    ]
            )
    )
}

jacocoTestCoverageVerification {
    dependsOn test
    classDirectories.setFrom(
            fileTree(
                    dir: 'build/classes/kotlin/main',
                    exclude: [
                            "com/example/springboot/app/auth/**",
                            "com/example/springboot/app/configuration/**",
                            "com/example/springboot/app/controller/**",
                            "com/example/springboot/ApplicationKt.class",
                            "com/example/springboot/PrintScriptServiceApplication.class",
                            "META-INF/printScript-service.kotlin_module",
                    ]
            )
    )
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

tasks.check {
    dependsOn jacocoTestCoverageVerification
}
